lua_package_path "/etc/lua-resty-jwt/lib/?.lua;;";

server {
    error_log /var/log/nginx/error.log info;

    location / {
        resolver 10.88.5.1; # look at /etc/resolv.conf

        set $proxy "";
        rewrite_by_lua_block {
            local private_uri_regex = os.getenv("PROXY_PRIVATE_URI")
            if not ngx.re.match(ngx.var.http_host, private_uri_regex) then
                ngx.var.proxy = os.getenv("PROXY_PASS_PUBLIC")
                return
            end

            local redirect = os.getenv("PROXY_REDIRECT_UNAUTHORIZED")
            local jwt_header = os.getenv("JWT_HEADER")
            if jwt_header == nil then
                jwt_header = "authorization"
            end 

            local jwt_token = ngx.req.get_headers()[jwt_header]
            if jwt_token == nil then
                return ngx.redirect(redirect)
            end

            local b64 = require("ngx.base64")
            local jwt_token, err = b64.decode_base64url(jwt_token)
            if not jwt_token then
                ngx.log(ngx.WARN, 'could not decode token: ', err)
                return ngx.redirect(redirect)
            end
            
            local jwt_public = os.getenv("JWT_PUBLIC")
            local jwt_public, err = b64.decode_base64url(jwt_public)
            if not jwt_public then
                ngx.log(ngx.WARN, 'could not decode public key: ', err)
                return ngx.redirect(redirect)
            end

            local jwt = require "resty.jwt"
            local claims = jwt:verify(jwt_public, jwt_token)

            local cjson = require "cjson"
            ngx.log(ngx.INFO, 'got token: ', cjson.encode(claims))

            local subject = claims['payload']
            if subject == nil then 
                ngx.log(ngx.WARN, 'invalid token: no payload found')
                return ngx.redirect(redirect)
            end

            subject = subject['sub']
            if subject == nil then 
                ngx.log(ngx.WARN, 'invalid token: no sub on payload')
                return ngx.redirect(redirect)
            end

            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeouts(1000)
            local redis_hostname = os.getenv("REDIS_HOSTNAME")
            local ok, err = red:connect(redis_hostname, 6379)
            if not ok then
                ngx.log(ngx.ERR, 'failed to connect to redis cluster: ', err)
                return ngx.redirect(redirect)
            end

            local res, err = red:get(subject)
            if not res then
                ngx.log(ngx.ERR, 'failed to get token: ', err)
                return ngx.redirect(redirect)
            end

            if res == ngx.null then
                ngx.log(ngx.WARN, 'token not found')
                return ngx.redirect(redirect)
            end

            ngx.var.proxy = os.getenv("PROXY_PASS_PRIVATE")
        }

        proxy_pass http://$proxy$uri;
    }
}