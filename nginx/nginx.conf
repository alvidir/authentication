lua_package_path "/etc/lua-resty-jwt/lib/?.lua;;";
env JWT_PUBLIC;
env JWT_HEADER;

server {
    location /test {
        default_type 'text/plain';
        resolver 10.88.5.1; # look at /etc/resolv.conf

        rewrite_by_lua_block {
            local jwt_header = os.getenv("JWT_HEADER")
            if jwt_header == nil then
                jwt_header = "authorization"
            end 

            local jwt_token = ngx.req.get_headers()[jwt_header]
            if jwt_token ~= nil then
                ngx.req.clear_header(jwt_header)
            else
                ngx.say("unauthorized")
                return
            end
            
            local jwt_public = os.getenv("JWT_PUBLIC")
            local jwt = require "resty.jwt"
            local jwt_obj = jwt:verify(jwt_public, jwt_token)
            
            local cjson = require "cjson"
            claims = cjson.encode(jwt_obj)

            local redis = require "resty.redis"
            local red = redis:new()

            red:set_timeouts(1000)
            local ok, err = red:connect("rauth-redis", 6379)
            if not ok then
                ngx.say("failed to connect to redis cluster: ", err)
                return
            end

            local res, err = red:get(claims['id'])
            if not res then
                ngx.say("failed to get token: ", err)
                return
            end

            if res == ngx.null then
                ngx.say("token not found.")
                return
            end
        }
    }
}